# ==============================================================================
# 
#   H O M E     P A G E
# 
# ==============================================================================
home:
  - title: <span class="display-4">Python Bootwrap</span>
    subtitle: Wraps one of the most popular front-end open-source toolkit Bootstrap for quick and easy prototyping of web-based user interfaces purely in Python

  - title: Installation
    description:
      - Use the following command to install Bootwrap
    code:
      pip install bootwrap

  - title: Hello World Application
    description:
      - A "Hello world" Bootwrap application looks something like this
    code: |
      @left
      from flask import Flask, Markup
      from bootwrap import Page, Text

      app = Flask(__name__)

      @app.route('/')
      def hello_world():
          return Markup(
              Page(content=Text('Hello Word!'))
          )
              
      if __name__ == '__main__':
          app.run(debug=True)
    image: hello-world-app.png

  - title: Multi-Pages Application
    description:
      - A multi-pages Bootwrap application looks something like this
    code: |
      @left
      from flask import Flask, Markup
      from bootwrap import (
          Page, Menu, Image,
          Anchor, Button, Text
      )

      app = Flask(__name__)

      class MyMenu(Menu):
          def __init__(self):
              super().__init__(
                  logo = Image(
                      'logo.png',
                      width=32,
                      alternative='Logo'
                  ),
                  brand=Text('Bootwrap').\\
                      as_strong().\\
                          as_light(),
                  anchors=[
                      Anchor('Home').\\
                          link('/'),
                      Anchor('About').\\
                          link('/about'),
                  ], 
                  actions=[
                      Button('Sign In').\\
                          as_outline().\\
                          as_light().\\
                          link('/signin')
                  ]
              )

      class MyPage(Page):
          def __init__(self, content):
              super().__init__(
                  favicon = 'favicon.ico',
                  title='Multi-pages Application',
                  menu=MyMenu(),
                  content=content
              )

      @app.route('/')
      def home():
          return Markup(
              MyPage(content=Text('Home').\\
                  as_heading(1))
          )

      @app.route('/about')
      def about():
          return Markup(
              MyPage(content=Text('About').\\
                  as_heading(1))
          )

      @app.route('/signin')
      def signin():
          return Markup(
              MyPage(content=Text('Sign In').\\
                  as_heading(1))
          )

      if __name__ == '__main__':
          app.run(debug=True)
    image: multi-pages-app.png

# ==============================================================================
# 
#   I N T R O D U C T I O N     P A G E
# 
# ==============================================================================
introduction:
  - title: Architecture
    description:
      - To simplify the process of prototyping interfaces, Bootwrap uses fixed architecture. The core element of this architecture is the page. The page consists of two main elements menu and content. The menu provides top-level navigation among different pages of your application, and content presents page information. Learn more about creating pages and menus below.
    image: page-n-menu.png  
  
  - title: Page
    description:
      - Page contains the top-level navigation menu and area for rendering user content. Its initializations consist of the following parameters
      - head: ['Param', 'Type', 'Description']
        body:
          - ['favicon', 'str', 'the file name for the favorite icon displayed in a browser;']
          - ['title', 'str', 'the page title, displayed in a browser;']
          - ['menu', 'Menu', 'the top-level page menu;']
          - ['content', 'WebComponent', 'the web-component representing a page content;']
      - The content could be any component that instantiates the WebComponent class. For example, to create a sophisticated layout you can use the Panel. It encapsulates multiple web components and can arrange them in different layouts.
    code: |
      @right
      from bootwrap import Menu

      class MyPage(Page):
        def __init__(self, content):
          super().__init__(
            favicon = ...,
            title=...,
            menu=...,
            content=...
          )

  - title: Menu
    description:
      - The menu represents the top-level navigation located at the top of a page. Its initializations consist of the following parameters
      - head: ['Param', 'Type', 'Description']
        body:
          - ['logo', 'Image', 'the images representing a company or organization logo;']
          - ['brand', 'Text', 'the name representing a company, organization, or a project;']
          - ['anchors', 'list of Anchor', 'the the list of anchors allowing to navigate to the different pages from the top-level menu;']
          - ['actions', 'list of Button', 'the list of buttons allowing to perform  specific actions such as login, logout, etc.;']
    code: |
      @right
      from bootwrap import Menu

      class MyMenu(Menu):
          def __init__(self):
              super().__init__(
                  logo = ...,
                  brand=...,
                  anchors=..., 
                  actions=...
              )

# ==============================================================================
# 
#   COMPONENTS    P A G E
# 
# ==============================================================================
components:

  # --- Anchor Tab -------------------------------------------------------------
  Anchor:
    - title: Anchor
      constructor: Anchor(name)
      arguments:
        - ['name', 'str', 'the anchor name']
      description:
        - An <code>Anchor</code> is used for creating a hyperlink to pages, files, email addresses, locations on the same page, or other web-resources defined by a URL address. The <i>Bootwrap</i> also uses the <code>Anchor</code> in conjunction with other web-components, for example, in creating a navigation menu.
        - Use the <code>link(href)</code> function to connect the <code>Anchor</code> to another web-resource defined by the <code>href</code> parameter.
      code: |
        @right
        Anchor('Search').link('https://www.google.com/')
      evaluation: |
        from bootwrap import Panel, Anchor
        output = Panel(
          Anchor('Search').\
            link('https://www.google.com/')
        )

    - title: Anchor Styles
      description:
        - Use the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code> for changing the <code>Anchor</code> appearance.
        - Follow the <a href='https://getbootstrap.com/'>Bootstrap</a> guideline to applying these styles.
      code: |
        @right
        Anchor('Primary').as_primary()
        Anchor('Secondary').as_secondary()
        Anchor('Success').as_success()
        Anchor('Warning').as_warning()
        Anchor('Danger').as_danger()
        Anchor('Info').as_info()
        Anchor('Light').as_light()
        Anchor('Dark').as_dark()
      evaluation: |
        from bootwrap import Panel, Anchor
        output = Panel(
          Anchor('Primary').as_primary().add_classes('mt-1'),
          Anchor('Secondary').as_secondary().add_classes('mt-1'),
          Anchor('Success').as_success().add_classes('mt-1'),
          Anchor('Warning').as_warning().add_classes('mt-1'),
          Anchor('Danger').as_danger().add_classes('mt-1'),
          Anchor('Info').as_info().add_classes('mt-1'),
          Anchor('Light').as_light().add_classes('mt-1'),
          Anchor('Dark').as_dark().add_classes('mt-1')
        )

  # --- Button Tab -------------------------------------------------------------
  Button:
    - title: Button
      constructor: Button(name)
      arguments:
        - ['name', 'str', 'the button name']
      description:
        - A <code>Button</code> is used for performing interactions on a website.
        - Use the <code>link(href)</code> function to connect the <code>Button</code> to another web-resource defined by the <code>href</code> parameter. In this scenario, the <code>Button</code> behaves similar to the <code>Anchor</code>.
      code: |
        @right
        # the button without style
        Button('Search').link('https://www.google.com/')
      evaluation: |
        from bootwrap import Panel, Button
        output = Panel(
          Button('Search').\
            link('https://www.google.com/'),
        )

    - title: Button Styles
      description:
        - Use the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code> for changing the <code>Button</code> appearance.
        - Use the <code>as_outline()</code> function to make the <code>Button</code> without background. Note, the <code>Button</code> will have an outline look only if you apply one of the predefined styles. For the <code>Button</code> without style, this function will have no effect.
        - Follow the <a href='https://getbootstrap.com/'>Bootstrap</a> guideline to applying these styles.
      code: |
        @right

        # to make a different appearance
        Button('Primary').as_primary()
        Button('Secondary').as_secondary()
        Button('Success').as_success()
        Button('Warning').as_warning()
        Button('Danger').as_danger()
        Button('Info').as_info()
        Button('Light').as_light()
        Button('Dark').as_dark()

        # to make the outline look
        Button('Primary').as_primary().as_outline()
        Button('Secondary').as_secondary().as_outline()
        Button('Success').as_success().as_outline()
        Button('Warning').as_warning().as_outline()
        Button('Danger').as_danger().as_outline()
        Button('Info').as_info().as_outline()
        Button('Light').as_light().as_outline()
        Button('Dark').as_dark().as_outline()

      evaluation: |
        from bootwrap import Panel, Button
        output = Panel(
          Button('Primary').as_primary().add_classes('mt-1'),
          Button('Secondary').as_secondary().add_classes('mt-1'),
          Button('Success').as_success().add_classes('mt-1'),
          Button('Warning').as_warning().add_classes('mt-1'),
          Button('Danger').as_danger().add_classes('mt-1'),
          Button('Info').as_info().add_classes('mt-1'),
          Button('Light').as_light().add_classes('mt-1'),
          Button('Dark').as_dark().add_classes('mt-1'),
          Button('Primary').as_primary().as_outline().add_classes('mt-1'),
          Button('Secondary').as_secondary().as_outline().add_classes('mt-1'),
          Button('Success').as_success().as_outline().add_classes('mt-1'),
          Button('Warning').as_warning().as_outline().add_classes('mt-1'),
          Button('Danger').as_danger().as_outline().add_classes('mt-1'),
          Button('Info').as_info().as_outline().add_classes('mt-1'),
          Button('Light').as_light().as_outline().add_classes('mt-1'),
          Button('Dark').as_dark().as_outline().add_classes('mt-1')
        )

    - title: Disable Button
      description:
        - But default the <code>Button</code> always enabled. Use the <code>as_disabled()</code> function to make the <code>Button</code> disabled. Disable status prevent user to initiate any action assigned to the <code>Button</code>.
      code: |
        @right
        # the button without style
        Button('Enabled').as_primary()
        Button('Disabled').as_primary().as_disabled()
      evaluation: |
        from bootwrap import Panel, Button
        output = Panel(
          Button('Enabled').as_primary(),
          Button('Disabled').as_primary().as_disabled()
        )

  # --- Form Tab ---------------------------------------------------------------

  Form:
    - title: Form
      constructor: Form(*components)
      arguments:
        - ['components', 'tuple', 'the input components and actions.']
      description:
        - A <code>Form</code> is a web-component with interactive controls for submitting information.
        - Use the <code>on_submit(href)</code> function to specify URL where entered information need to be sent for processing.
      code: |
        @right
        Form(
          # here should be a list of
          # input components and actions 
          ...
        ).on_submit('go/to/this/url')

    - title: Checkbox Input
      constructor: Checkbox(name, label)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form, during handling a submit action' ]
      description:
        - A <code>CheckboxInput</code> is a component which can be in two states <i>checked</i> or <i>unchecked</i>.
        - The function <code>as_checked()</code> changes the component state from  <i>unchecked</i> to <i>checked</i>.
        - The <code>as_disabled()</code> function prevents user to modify a status of this component.
      code: |
        @right
        CheckboxInput('One', 'opt1')
        CheckboxInput('Two', 'opt2').as_checked()
        CheckboxInput('Three', 'opt3').as_disabled()
      evaluation: |
        from bootwrap import Form, CheckboxInput
        output = Form('').append(
          CheckboxInput('One', 'opt1'),
          CheckboxInput('Two', 'opt2').as_checked(),
          CheckboxInput('Three', 'opt3').as_disabled()
        )

    - title: Radio Input
      constructor: RadioInput(name, label)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form, during handling a submit action (this value should be the same for every component belonged to the same group)' ]
      description:
        - A <code>RadioInput</code> is a component for creating a group of options. The individual <code>RadioInput</code> can be in two states, <i>selected</i> or <i>deselected</i>. Note, if one option in a group is <i>selected</i>, all others automatically are <i>deselected</i>.
        - The function <code>with_value(value)</code> sets <code>value</code>, which assigned to the group when user selects the according <code>RadioInput</code>.
        - The function <code>as_checked()</code> changes the component state from  <i>deselected</i> to <i>selected</i>.
        - The <code>as_disabled()</code> function prevents user to modify a status of this component.
      code: |
        @right
        RadioInput('One', 'choice').with_value('1')
        RadioInput('Two', 'choice').with_value('2').as_checked()
        RadioInput('Three', 'choice').with_value('3').as_disabled()
      evaluation: |
        from bootwrap import Form, RadioInput
        output = Form('').append(
          RadioInput('One', 'choice').with_value('1'),
          RadioInput('Two', 'choice').with_value('2').as_checked(),
          RadioInput('Three', 'choice').with_value('3').as_disabled()
        )

    - title: Text Input
      constructor: TextInput(name, label, rows=None, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'rows', 'int', 'the number of input text rows' ]
        - [ 'placeholder', 'str', 'the text displayed when no value is entered.' ]
      description:
        -  A <code>TextInput</code> is a component for entering a text information.
        - The <code>with_value(value)</code> function sets the <code>value</code> in the input component.
        - The <code>as_disabled()</code> function prevents user from entering any values.
      code: |
        @right
        TextInput('Text', 'text')
        TextInput('Text', 'text', rows=3)
        TextInput('Text', 'text', placeholder='type here')
        TextInput('Text', 'text').with_value('Hello World!')
        TextInput('Text', 'text').as_disabled()
      evaluation: |
        from bootwrap import Form, TextInput
        output = Form('').append(
          TextInput('Text', 'text'),
          TextInput('Text', 'text', rows=3),
          TextInput('Text', 'text', placeholder='type here'),
          TextInput('Text', 'text').with_value('Hello World!'),
          TextInput('Text', 'text').as_disabled()
        )

    - title: Email Input
      constructor: EmailInput(name, label, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'placeholder', 'str', 'the text displayed when no email is entered.' ]
      description:
        -  A <code>EmailInput</code> is a component for entering a user email. Its behavior is identical to the <code>TextInput</code> except additional validation of entering email address.
      code: |
        @right
        EmailInput('Email', 'email')
        EmailInput('Email', 'email', placeholder='your@email.com')
        EmailInput('Email', 'email').with_value('my@email.com')
        EmailInput('Email', 'email').as_disabled()
      evaluation: |
        from bootwrap import Form, EmailInput
        output = Form('').append(
          EmailInput('Email', 'email'),
          EmailInput('Email', 'email', placeholder='your@email.com'),
          EmailInput('Email', 'email').with_value('my@email.com'),
          EmailInput('Email', 'email').as_disabled()
        )

    - title: Password Input
      constructor: PasswordInput(name, label, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'placeholder', 'str', 'the text displayed when no password is entered.' ]
      description:
        -  A <code>PasswordInput</code> is a component for entering a user password. Its behavior is identical to the <code>TextInput</code> except additional validation of entering password.
      code: |
        @right
        PasswordInput('Password', 'password')
        PasswordInput('Password', 'password', placeholder='your password')
        PasswordInput('Password', 'password').with_value('********')
        PasswordInput('Password', 'password').as_disabled()
      evaluation: |
        from bootwrap import Form, PasswordInput
        output = Form('').append(
          PasswordInput('Password', 'password'),
          PasswordInput('Password', 'password', placeholder='your password'),
          PasswordInput('Password', 'password').with_value('********'),
          PasswordInput('Password', 'password').as_disabled()
        )

    - title: Numeric Input
      constructor: NumericInput(name, label, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'placeholder', 'str', 'the text displayed when no number is entered.' ]
      description:
        -  A <code>NumericInput</code> is a component for entering a number. Its behavior is identical to the <code>TextInput</code> except additional validation of entering number. The <code>NumericInput</code> control in some web browsers may contain buttons helping to enter a number without a keyboard. 
      code: |
        @right
        NumericInput('Number', 'number')
        NumericInput('Number', 'number', placeholder='your number')
        NumericInput('Number', 'number').with_value('123')
        NumericInput('Number', 'number').as_disabled()
      evaluation: |
        from bootwrap import Form, NumericInput
        output = Form('').append(
          NumericInput('Number', 'number'),
          NumericInput('Number', 'number', placeholder='your number'),
          NumericInput('Number', 'number').with_value('123'),
          NumericInput('Number', 'number').as_disabled()
        )


    - title: Select Input
      constructor: SelectInput(name, label, *options)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'options', 'tuple', 'the dropdown options' ]
      description:
        - A <code>SelectInput</code> is a component for selecting a specific options from the dropdown list. Use <code>SelectInput.Option(name, value, disabled=False)</code> class to  define selector options. The  <code>name</code> parameter defines what user sees in the e dropdown list. The <code>value</code> parameters defines what is set is user selects a specific options. The <code>disabled</code> parameters makes an option unavailable for selection.
        - The function <code>with_value(value)</code> selects an option with associated <code>value</code>.
        - The <code>as_disabled()</code> function prevents user to select any options.
      code: |
        @right
        options = [
          SelectInput.Option('One', 1),
          SelectInput.Option('Two', 2),
          SelectInput.Option('Three', 3, disabled=True)
        ]
        
        SelectInput('Selector', 'choice', options)
        SelectInput('Selector', 'choice', options).with_value(2)
        SelectInput('Selector', 'choice', options).as_disabled()
      evaluation: |
        from bootwrap import Form, SelectInput
        options = [
          SelectInput.Option('One', 1),
          SelectInput.Option('Two', 2),
          SelectInput.Option('Three', 3, disabled=True)
        ]

        output = Form('').append(
          SelectInput('Selector', 'choice', options),
          SelectInput('Selector', 'choice', options).with_value(2),
          SelectInput('Selector', 'choice', options).as_disabled()
        )