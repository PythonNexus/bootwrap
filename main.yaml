# ==============================================================================
# 
#   H O M E     P A G E
# 
# ==============================================================================
home:
  - title: <span class="display-4">Bootwrap</span>
    description: 
      - <h2 class="text-muted">Pure Python wrapper for one of the most popular front-end toolkit Bootstrap, allowing quick and easy prototyping of web-based user interfaces</h2>
    image: flash.png  

  - title: Installation
    description: 
      - "Use the following command to install Python Bootwrap (<span class='text-danger'>Please note, the PIP install is currently unavailable. The first version of Python Bootstrap should be released toward the end of March 2021.</span>)"
    code:
      ~$ pip install bootwrap

  - title: Single-Page Application
    description:
      - "A single-page Bootwrap application looks something like this:"
    code: |
      @left
      from flask import Flask, Markup
      from bootwrap import Page, Text

      app = Flask(__name__)

      @app.route('/')
      def hello_world():
          return Markup(
              Page(content=[Text('Hello Word!')])
          )
              
      if __name__ == '__main__':
          app.run(debug=True)
    image: single-page-app.png

  - title: Multi-Pages Application
    description:
      - "A multi-pages Bootwrap application looks something like this:"
    code: |
      @left
      from flask import Flask, Markup
      from bootwrap import (
        Page, Menu, Image, Anchor, Button, Text
      )

      # Both 'logo.png' and 'favicon.ico' are
      # stored in 'docs' folder
      app = Flask(
        __name__,
        static_folder='docs',
        static_url_path=''
      )

      class MyMenu(Menu):
          def __init__(self):
              super().__init__(
                  logo=Image(
                    'logo.png',
                    width=32,
                    alt='Logo'),
                  brand=Text('Bootwrap').\
                    as_strong().\
                    as_light().\
                    add_classes('ml-2'),
                  anchors=[
                      Anchor('Home').\
                      link('/'),
                      Anchor('About').\
                      link('/about')
                  ], 
                  actions=[
                      Button('Sign In').\
                      as_outline().\
                      as_light().\
                      link('/signin')
                  ]
              )

      class MyPage(Page):
          def __init__(self, content):
              super().__init__(
                  favicon = 'favicon.ico',
                  title='Hello World Application',
                  menu=MyMenu(),
                  content=content
              )

      @app.route('/')
      def home():
          return Markup(
            MyPage(content=[
              Text('Home').as_heading(1)
              ]
            )
          )

      @app.route('/about')
      def about():
          return Markup(
            MyPage(content=[
              Text('About').as_heading(1)
            ]
          )
        )

      @app.route('/signin')
      def signin():
          return Markup(
            MyPage(
              content=[
                Text('Sign In').as_heading(1)
              ]
            )
          )

      if __name__ == '__main__':
          app.run(debug=True)
    image: multi-pages-app.png

# ==============================================================================
# 
#   I N T R O D U C T I O N     P A G E
# 
# ==============================================================================
introduction:
  - title: Architecture
    description:
      - To simplify the process of prototyping interfaces, Bootwrap uses fixed architecture. The core element of this architecture is the page. The page consists of two main elements menu and content. The menu provides top-level navigation among different pages of your application, and content presents page information. Learn more about creating pages and menus below.
    image: page-n-menu.png  
  
  - title: Page
    constructor: Page(favicon, title, menu, content)
    arguments:
      - ['favicon', 'str', 'the file name for the favorite icon displayed in a browser;']
      - ['title', 'str', 'the page title, displayed in a browser;']
      - ['menu', 'Menu', 'the top-level page menu;']
      - ['content', 'list', 'the list of <code>WebComponent</code> representing a page content;']
    description:
      - Page contains the top-level navigation menu and area for rendering user content. Its initializations consist of the following parameters
      - The content could be any component that instantiates the WebComponent class. For example, to create a sophisticated layout you can use the Panel. It encapsulates multiple web components and can arrange them in different layouts.
    code: |
      @right
      from bootwrap import Menu

      class MyPage(Page):
        def __init__(self, content):
          super().__init__(
            favicon = ...,
            title=...,
            menu=...,
            content=...
          )

  - title: Menu
    constructor: Menu(logo, brand, anchors, actions)
    arguments:
      - ['logo', 'Image', 'the <code>Image</code> representing a company or organization logo;']
      - ['brand', 'Text', 'the <code>Text</code> representing a company, organization, or a project;']
      - ['anchors', 'list', 'the the list of <code>Anchor</code> allowing to navigate to the different pages from the top-level menu;']
      - ['actions', 'list', 'the list of <code>Button</code> allowing to perform  specific actions such as login, logout, etc.;']
    description:
      - The menu represents the top-level navigation located at the top of a page. Its initializations consist of the following parameters
    code: |
      @right
      from bootwrap import Menu

      class MyMenu(Menu):
          def __init__(self):
              super().__init__(
                  logo = ...,
                  brand=...,
                  anchors=..., 
                  actions=...
              )

# ==============================================================================
# 
#   COMPONENTS    P A G E
# 
# ==============================================================================
components:

  # --- Anchor Tab -------------------------------------------------------------
  Anchor:
    - title: Anchor
      constructor: Anchor(inner=None, role=None)
      arguments:
        - ['inner', 'obj', 'the object (usually <code>str</code> or <code>WebComponent</code>) wrapped by an anchor']
        - ['role', 'str', 'he anchor role. This parameter is not used in a typical scenario. It usually set by other web-components, which is using the anchor to introduce a specific action.  ']
      description:
        - An <code>Anchor</code> is used for creating a hyperlink to pages, files, email addresses, locations on the same page, or other web-resources defined by a URL address. The <i>Bootwrap</i> also uses the <code>Anchor</code> in conjunction with other web-components, for example, in creating a navigation menu.
        - Use the <code>link(href)</code> function to connect the <code>Anchor</code> to another web-resource defined by the <code>href</code> parameter.
      code: |
        @right
        Anchor('Google Search').link('https://www.google.com/')
      evaluation: |
        from bootwrap import Panel, Anchor
        output = Panel(
          Anchor('Google Search').\
            link('https://www.google.com/')
        )

    - title: Anchor Styles
      description:
        - Use the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code> for changing the <code>Anchor</code> appearance.
        - Follow the <a href='https://getbootstrap.com/'>Bootstrap</a> guideline to applying these styles.
      code: |
        @right
        Anchor('Primary').as_primary()
        Anchor('Secondary').as_secondary()
        Anchor('Success').as_success()
        Anchor('Warning').as_warning()
        Anchor('Danger').as_danger()
        Anchor('Info').as_info()
        Anchor('Light').as_light()
        Anchor('Dark').as_dark()
      evaluation: |
        from bootwrap import Panel, Anchor

        panel = Panel(
          Anchor('Primary').as_primary(),
          Anchor('Secondary').as_secondary(),
          Anchor('Success').as_success(),
          Anchor('Warning').as_warning(),
          Anchor('Danger').as_danger(),
          Anchor('Info').as_info(),
          Anchor('Light').as_light(),
          Anchor('Dark').as_dark()
        )

        for anchor in panel:
          anchor.add_classes('mb-1')

        output = panel


  # --- Badge Tab --------------------------------------------------------------
  Badge:
    - title: Badge
      constructor: Badge(label)
      arguments:
        - ['label', 'str', 'the badge label']
      description:
        - A <code>Badge</code> is used for presenting short  message on web-page , ex. "process status".
        - Use the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code> for changing the <code>Badge</code> appearance.
      code: |
        @right

        Badge('Primary').as_primary()
        Badge('Secondary').as_secondary()
        Badge('Success').as_success()
        Badge('Warning').as_warning()
        Badge('Danger').as_danger()
        Badge('Info').as_info()
        Badge('Light').as_light()
        Badge('Dark').as_dark()

      evaluation: |
        from bootwrap import Panel, Badge

        panel = Panel(
          Badge('Primary').as_primary(),
          Badge('Secondary').as_secondary(),
          Badge('Success').as_success(),
          Badge('Warning').as_warning(),
          Badge('Danger').as_danger(),
          Badge('Info').as_info(),
          Badge('Light').as_light(),
          Badge('Dark').as_dark()
        )

        for badge in panel:
          badge.add_classes('mb-1')

        output = panel

  # --- Button Tab -------------------------------------------------------------
  Button:
    - title: Button
      constructor: Button(name)
      arguments:
        - ['name', 'str', 'the button name']
      description:
        - A <code>Button</code> is used for performing interactions on a website.
        - Use the <code>link(href)</code> function to connect the <code>Button</code> to another web-resource defined by the <code>href</code> parameter. In this scenario, the <code>Button</code> behaves similar to the <code>Anchor</code>.
      code: |
        @right
        # the button without style
        Button('Google Search').link('https://www.google.com/')
      evaluation: |
        from bootwrap import Panel, Button
        output = Panel(
          Button('Google Search').\
            link('https://www.google.com/'),
        )

    - title: Button Styles
      description:
        - Use the following functions <code>as_primary()</code>, <code>as_secondary()</code>, <code>as_success()</code>, <code>as_warning()</code>, <code>as_danger()</code>, <code>as_info()</code>, <code>as_light()</code>, and <code>as_dark()</code> for changing the <code>Button</code> appearance.
        - Use the <code>as_outline()</code> function to make the <code>Button</code> without background. Note, the <code>Button</code> will have an outline look only if you apply one of the predefined styles. For the <code>Button</code> without style, this function will have no effect.
        - Follow the <a href='https://getbootstrap.com/'>Bootstrap</a> guideline to applying these styles.
      code: |
        @right

        # to make a different appearance
        Button('Primary').as_primary()
        Button('Secondary').as_secondary()
        Button('Success').as_success()
        Button('Warning').as_warning()
        Button('Danger').as_danger()
        Button('Info').as_info()
        Button('Light').as_light()
        Button('Dark').as_dark()

        # to make the outline look
        Button('Primary').as_primary().as_outline()
        Button('Secondary').as_secondary().as_outline()
        Button('Success').as_success().as_outline()
        Button('Warning').as_warning().as_outline()
        Button('Danger').as_danger().as_outline()
        Button('Info').as_info().as_outline()
        Button('Light').as_light().as_outline()
        Button('Dark').as_dark().as_outline()

      evaluation: |
        from bootwrap import Panel, Button, Separator

        panel = Panel(
          Button('Primary').as_primary(),
          Button('Secondary').as_secondary(),
          Button('Success').as_success(),
          Button('Warning').as_warning(),
          Button('Danger').as_danger(),
          Button('Info').as_info(),
          Button('Light').as_light(),
          Button('Dark').as_dark(),
          Separator(),
          Button('Primary').as_primary().as_outline(),
          Button('Secondary').as_secondary().as_outline(),
          Button('Success').as_success().as_outline(),
          Button('Warning').as_warning().as_outline(),
          Button('Danger').as_danger().as_outline(),
          Button('Info').as_info().as_outline(),
          Button('Light').as_light().as_outline(),
          Button('Dark').as_dark().as_outline()
        )

        for component in panel:
          if isinstance(component, Button):
            component.add_classes('mb-1')

        output = panel

    - title: Disable Button
      description:
        - But default the <code>Button</code> always enabled. Use the <code>as_disabled()</code> function to make the <code>Button</code> disabled. Disable status prevent user to initiate any action assigned to the <code>Button</code>.
      code: |
        @right
        # the button without style
        Button('Enabled').as_primary()
        Button('Disabled').as_primary().as_disabled()
      evaluation: |
        from bootwrap import Panel, Button
        output = Panel(
          Button('Enabled').as_primary(),
          Button('Disabled').as_primary().as_disabled()
        )

  # --- Dialog Tab -------------------------------------------------------------

  Dialog:
    - title: Dialog
      constructor: Dialog(title, content, *actions)
      arguments:
        - ['title', 'str', 'the dialog title']
        - ['content', 'str|WC', 'the content inside a dialog window, which can be either a <code>str</code> for a simple message or a <code>WebComponent</code> to provide more complex functionality']
        - ['actions', 'list', 'the list of dialog actions, normally it should be <code>Button</code>s']
      description:
        - A <code>Dialog</code> is a web-component to display a modal window.
      code: |
        @right
        dialog = Dialog(
          'Greeting',
          'Hello World!',
          Button('Bye').dismiss()
        )
        button = Button('Say Hello').toggle(dialog)   
      evaluation: |
        from bootwrap import Panel, Dialog, Button

        dialog = Dialog(
          'Greeting',
          'Hello World!',
          Button('Bye').dismiss()
        )
        button = Button('Say Hello').toggle(dialog)  

        output = Panel(dialog, button)

    - title: Question Dialog
      description:
        - An example of how <code>Dialog</code> can be used for confirming a specific action. Make sure that you provide a correct URL, which <strong>Confirm</strong> <code>Button</code> linked to. You can specify define this URL something like this <code>local/file_system?file_id=1234567&action=delete</code> 
      code: |
        @right
        dialog = Dialog(
          'Delete File',
          'Are you sure?',
          Button('Confirm').\
            as_danger().\
            link('url/to/act')
          Button('Cancel').\
            dismiss()
        ).as_danger()

        button = Button('Confirm').\
          as_danger().\
          toggle(dialog)   
      evaluation: |
        from bootwrap import Panel, Dialog, Button

        dialog = Dialog(
          'Delete File',
          'Are you sure that you want to delete this file?',
          Button('Confirm').as_danger().dismiss(),
          Button('Cancel').dismiss()
        ).as_danger()
        button = Button('Confirm').as_danger().toggle(dialog)   

        output = Panel(dialog, button)

    - title: Complex Dialog
      description:
        - An example of how <code>Dialog</code> can be used for buying Google shares. It contains a web <code>Form</code> where a user can specify an amount (in Dollars) for buying shares. When the user presses the <strong>Buy</strong> <code>Button</code>, the form will be submitted to the server (at <code>url/to/act</code>). If the user selects <strong>Cancel</strong>, the dialog will be closed, discarding the buying action.
      code: |
        @right
        dialog = Dialog(
            'Google (NASDAQ: GOOGL)',
            Form(
                NumericInput(
                    'Amount($)',
                    'amount',
                    placeholder=\
                      'enter an amount for buying shares'
                ),
                Button('Cancel').\
                  add_classes('float-right').\
                  dismiss(),
                Button('Buy').\
                  add_classes('float-right mr-2').\
                  as_success().\
                  submit()
            ).on_submit('url/to/act')
        )

        button = Button('Buy Shares').\
          as_primary().\
          toggle(dialog)     
      evaluation: |
        from bootwrap import Panel, Form, NumericInput, Dialog, Button

        dialog = Dialog(
            'Google (NASDAQ: GOOGL)',
            Form(
                NumericInput(
                    'Amount($)',
                    'amount',
                    placeholder='enter an amount for buying shares'
                ),
                Button('Cancel').add_classes('float-right').dismiss(),
                Button('Buy').add_classes('float-right mr-2').as_success().dismiss()
            )
        )
        button = Button('Buy Shares').as_primary().toggle(dialog)   

        output = Panel(dialog, button)

  # --- Form Tab ---------------------------------------------------------------

  Form:
    - title: Form
      constructor: Form(*components)
      arguments:
        - ['components', 'tuple', 'the input components and actions.']
      description:
        - A <code>Form</code> is a web-component with interactive controls for submitting information.
        - Use the <code>on_submit(href)</code> function to specify URL where entered information need to be sent for processing.
      code: |
        @right
        Form(
          # here should be a list of
          # input components and actions 
          ...
        ).on_submit('go/to/this/url')

    - title: Checkbox Input
      constructor: Checkbox(name, label)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form, during handling a submit action' ]
        - [ 'checked', 'bool', '<code>True</code> to make flag checked and <code>False</code> to make flag unchecked accordingly' ]
      description:
        - A <code>CheckboxInput</code> is a component which can be in two states <i>checked</i> or <i>unchecked</i>.
        - The <code>as_disabled()</code> function prevents user to modify a status of this component.
      code: |
        @right
        CheckboxInput('One', 'opt1')
        CheckboxInput('Two', 'opt2', True)
        CheckboxInput('Three', 'opt3').as_disabled()
      evaluation: |
        from bootwrap import Form, CheckboxInput
        output = Form(
          CheckboxInput('One', 'opt1'),
          CheckboxInput('Two', 'opt2', True),
          CheckboxInput('Three', 'opt3').as_disabled()
        )

    - title: Select Input
      constructor: SelectInput(name, label, *options)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'options', 'tuple', 'the set of options' ]
      description:
        - A <code>SelectInput</code> is a component for selecting a specific options from the dropdown list. Use <code>SelectInput.Option(name, value, disabled=False)</code> class to  define selector options. The  <code>name</code> parameter defines what user sees in the options list. The <code>value</code> parameters defines what is set if user selects a specific options. The <code>disabled</code> parameters makes an option unavailable for selection.
        - The function <code>as_radio()</code> changes the selector look from the dropdown list to a set of radio buttons.
        - The <code>as_disabled()</code> function prevents user to select any options.
      code: |
        @right
        options = [
          SelectInput.Option('One', 1),
          SelectInput.Option('Two', 2),
          SelectInput.Option('Three', 3, disabled=True)
        ]
        
        SelectInput('Selector1', 'choice', 2, options)
        SelectInput('Selector2', 'choice', 2, options).as_disabled()
        SelectInput('Selector3', 'choice', 2, options).as_radio()
      evaluation: |
        from bootwrap import Form, SelectInput
        options = [
          SelectInput.Option('One', 1),
          SelectInput.Option('Two', 2),
          SelectInput.Option('Three', 3, disabled=True)
        ]

        output = Form(
          SelectInput('Selector1', 'choice', 2, options),
          SelectInput('Selector2', 'choice', 2, options).as_disabled(),
          SelectInput('Selector3', 'choice', 2, options).as_radio()
        )

    - title: Text Input
      constructor: TextInput(name, label, value=None, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'value', 'str', 'the value to set' ]
        - [ 'placeholder', 'str', 'the text displayed when no value is entered' ]
      description:
        -  A <code>TextInput</code> is a component for entering a text information.
        - The <code>with_multirows(n)</code> function  expands the text input to <code>n</code> rows. Use this option if the user needs to enter a long piece of text.
        - The <code>for_email()</code> and <code>for_password()</code> functions configure the input for a specific type of information (<i>email</i> and  <i>password</i> accordingly).
        - The <code>as_disabled()</code> function prevents user from entering any values.
      code: |
        @right
        # the text input
        TextInput('Text1', 'text')
        TextInput('Text2', 'text').with_multirows(3)
        TextInput('Text3', 'text', placeholder='type here')
        TextInput('Text4', 'text', 'Hello World!')
        TextInput('Text5', 'text').as_disabled()

        # the email input
        TextInput('Email', 'email', 'my@email.com').for_email()

        # the password input
        TextInput('Password', 'password', '********').for_password()
      evaluation: |
        from bootwrap import Form, TextInput
        output = Form(
          TextInput('Text1', 'text'),
          TextInput('Text2', 'text').with_multirows(3),
          TextInput('Text3', 'text', placeholder='type here'),
          TextInput('Text4', 'text', 'Hello World!'),
          TextInput('Text5', 'text').as_disabled(),
          TextInput('Email', 'email', 'my@email.com').for_email(),
          TextInput('Password', 'password', '********').for_password()
        )

    - title: Numeric Input
      constructor: NumericInput(name, label, placeholder=None)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'value', 'int|float', 'the value to set' ]
        - [ 'placeholder', 'str', 'the text displayed when no number is entered.' ]
      description:
        -  A <code>NumericInput</code> is a component for entering a number. Its behavior is identical to the <code>TextInput</code> except additional validation of entering number. The <code>NumericInput</code> control in some web browsers may contain buttons helping to enter a number without a keyboard. 
      code: |
        @right
        NumericInput('Number', 'number')
        NumericInput('Number', 'number', placeholder='your number')
        NumericInput('Number', 'number', '123')
        NumericInput('Number', 'number').as_disabled()
      evaluation: |
        from bootwrap import Form, NumericInput
        output = Form(
          NumericInput('Number', 'number'),
          NumericInput('Number', 'number', placeholder='your number'),
          NumericInput('Number', 'number', '123'),
          NumericInput('Number', 'number').as_disabled()
        )

    - title: Hidden Input
      constructor: HiddenInput(name, value)
      arguments:
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
        - [ 'value', 'obj', 'the value to set' ]
      description:
        - A <code>HiddenInput</code> is a component for hosting value within a form without showing it to a user. 
      code: |
        @right
        HiddenInput('token', '123')

    - title: File Input
      constructor: FileInput(name, label)
      arguments:
        - [ 'label', 'str', 'the input label showing for user' ]
        - [ 'name', 'str', 'the input name, used for getting an input value from the form' ]
      description:
        -   A <code>FileInput</code> is a component for selecting and uploading file.
      code: |
        @right
        FileInput('Number', 'number')
        FileInput('Number', 'number').as_disabled()
      evaluation: |
        from bootwrap import Form, FileInput
        output = Form(
          FileInput('File', 'file'),
          FileInput('File', 'file').as_disabled()
        )

  # --- Image Tab ---------------------------------------------------------------

  Image:
    - title: Image
      constructor: Image(src, width=None, height=None, alt=None)
      arguments:
        - ['src', 'str', 'the URL defining image location']
        - ['width', 'int', 'the image width']
        - ['height', 'int', 'the image height']
        - ['alt', 'int', 'the image alternative text']
      description:
        - A <code>Image</code> is a web-component for showing an image.
      code: |
        @right
        Image('logo.png')
      evaluation: |
        from bootwrap import Image
        output = Image('logo.png')


  # --- Javascript Tab ---------------------------------------------------------

  Javascript:
    - title: Javascript
      constructor: Javascript(src=None, script=None, submap=None)
      arguments:
        - ['src', 'str', 'the URL to load Javascript code']
        - ['script', 'str', 'the Javascript code']
        - ['submap', 'dict', 'The map with substitutions, binding the Javascript with Python objects']
      description:
        - A <code>Javascript</code> is a web-component for inserting <i>Javascript</i> code into the HTML page. This can be done in two ways. You can specify an external <i>Javascript</i> file via a URL using the <code>src</code> parameter. Or you can define <i>Javascript</i> code using the <code>script</code> parameter. To make a connection between <i>Javascript</i> and <i>Python</i> objects use the <code>submap</code> parameter. <code>submap</code> is a dictionary where <strong>key</strong> is a name of a variable within <i>Javascript</i> to replace with <strong>value</strong> - Python object. If <i>Python</i> object is an instance of <code>WebComponent</code> the substitution process with place it's identifier into the <i>Javascript </i>
      code: |
        @right
        # Javascript URL
        Javascript('https://ajax...0/jquery.min.js')

        # Javascript code
        label = Text('Answer:').as_strong()
        answer = Text('unknown').add_classes('mr-2 ml-2')
        btn_yes = Button('Yes').as_success()
        btn_no = Button('No').as_danger()

        action = Javascript(
          script='''
            $("#btn_yes").on("click",function(){
              $("#answer").text("Yes");
            });
            $("#btn_no").on("click",function(){
              $("#answer").text("No");
            });
          ''',
          submap={
            'answer': answer,
            'btn_yes': btn_yes,
            'btn_no': btn_no
          }
        )
        
        Panel(
          label, answer, btn_yes, btn_no, action
        )
      evaluation: |
        from bootwrap import Panel, Javascript, Button, Text

        label = Text('Answer:').as_strong()
        answer = Text('unknown').add_classes('mr-2 ml-2')
        btn_yes = Button('Yes').as_success()
        btn_no = Button('No').as_danger()

        action = Javascript(
          script='''
            $("#btn_yes").on("click",function(){
              $("#answer").text("Yes");
            });
            $("#btn_no").on("click",function(){
              $("#answer").text("No");
            });
          ''',
          submap={
            'answer': answer,
            'btn_yes': btn_yes,
            'btn_no': btn_no
          }
        )
        output = Panel(
          label, answer, btn_yes, btn_no, action
        )

  # --- Link Tab ---------------------------------------------------------------

  Link:
    - title: Link
      constructor: Link(href, rel='stylesheet', ctype='text/css')
      arguments:
        - ['href', 'str', 'the attribute specifies the URL of the linked resource where the URL can be absolute or relative (from MDN WebDoc)']
        - ['rel', 'str', 'the attribute names a relationship of the linked document to the current document (from MDN WebDoc)']
        - ['ctype', 'str', 'the attribute is used to define the type of the content linked to (from MDN WebDoc)']
      description:
        - A <code>Link</code> is a web-component for linking an external resource. Applied in conjunction with the <code>Page</code>
      code: |
        @right
        Link('https://cdnjs.cloudflare.com/.../all.min.css')


  # --- List Tab ---------------------------------------------------------------

  List:
    - title: List
      constructor: Link(*items)
      arguments:
        - ['items', 'list', 'the list items']
      description:
        - A <code>List</code> is a web-component for showing a list of your defined items. It could be a list of folders/files in your specified directory, books, shares emails, etc.
      code: |
        @right
        List(*[List.Item('Item %d' % i) for i in range(3)])
      evaluation: |
        from bootwrap import List

        items = [
          List.Item('Item 0'),  
          List.Item('Item 1'),
          List.Item('Item 2')
        ]
        output = List(*items)

    - title: List.Item
      constructor: List.Item(*items)
      arguments:
        - ['title', 'obj', 'the first-level line to define an item name.']
        - ['description', 'obj', 'the second-level line to show additional information about an item (default=None).']
        - ['marker', 'obj', 'the object levelled with the item title and justified to the right element to present such information as a timestamp or badge (default=None).']
        - ['icon', 'obj', 'Tte object justified to the left to present an item icon (default=None).']
        - ['custom', 'obj', 'The object justified the right to present actions that can be applied to an item(default=None).']
      description:
        - A <code>List.Item</code> is a web-component for constructing a <code>List</code> item. Its parameters are named to fit a general use-case. But you can adapt its behaviour to suit your application. For example, the custom parameter can be used to visualize a share price represented by an item or to provide action(s) with a share or both. 
        - <small>Please note, that share prices in the example are fictional and do not represent the real value of companies shares.</small>
      code: |
        @right
        List(
          List.Item(
              'Google (NASDAQ: GOOGL)',
              description= 'Price for a single Google share',
              icon=Icon('fab fa-google').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$1000').as_heading(3).as_success()
          ),
          List.Item(
              'LinkedIn (NASDAQ: LNKD)',
              description= 'Price for a single LinkedIn share',
              icon=Icon('fab fa-linkedin').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$837').as_heading(3).as_danger()
          ),
          List.Item(
              'Amazon (NASDAQ: AMZN)',
              description= 'Price for a single Amazon share',
              icon=Icon('fab fa-amazon').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$1054').as_heading(3).as_danger()
          )
        )
      evaluation: |
        from bootwrap import List, Text, Icon

        items = [
          List.Item(
              'Google (NASDAQ: GOOGL)',
              description= 'Price for a single Google share',
              icon=Icon('fab fa-google').add_classes('mt-1').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$1000').as_heading(3).as_success()
          ),
          List.Item(
              'LinkedIn (NASDAQ: LNKD)',
              description= 'Price for a single LinkedIn share',
              icon=Icon('fab fa-linkedin').add_classes('mt-1').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$837').as_heading(3).as_danger()
          ),
          List.Item(
              'Amazon (NASDAQ: AMZN)',
              description= 'Price for a single Amazon share',
              icon=Icon('fab fa-amazon').add_classes('mt-1').as_primary(),
              marker="12:04:58 12/01/2021",
              custom=Text('$1054').as_heading(3).as_danger()
          )
        ]
        output = List(*items)

  # --- Navigation Tab ---------------------------------------------------------

  Navigation:
    - title: Navigation
      constructor: Navigation(*items)
      arguments:
        - ['items', 'tuple', 'the navigation items.']
      description:
        - A <code> Navigation </code> is a web-component for grouping other controls and providing an intuitive way to switch between these groups.
        - Use <code>Navigation.Item(name, content, active=False)</code> class to  define navigation items. The  <code>name</code> defines what user sees in the navigation list. The <code>content</code> defines what is displayed when a specific navigation item is selected. The <code>active</code> makes a navigation item content is visable for user (in other words it make this item selected).
        - By default <code>Navigation</code> is rendered in a form of anchors. To change the navigation style, apply the following functions <code>as_tabs()</code>, <code>as_pills()</code> and <code>as_vertical()</code>.
        - Use the  <code>as_tabs()</code> function to make navigation looks like tabs.
        - Use the  <code>as_pills()</code> function to make navigation looks like buttons.
        - Use the  <code>as_vertical()</code> function to change navigation items orientation from horizontal to vertical. In the case of the vertical orientation, the navigation bar is displayed on the left and content on the right.
      code: |
        @right
        Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        )

        Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_vertical()

        Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_tabs()

        Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_pills()

        Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_pills().as_vertical()
      evaluation: |
        from bootwrap import Navigation, Panel, Separator

        navigation_links = Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        )

        navigation_links_vertical = Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_vertical()

        navigation_tabs = Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_tabs()

        navigation_pills = Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_pills()

        navigation_pills_vertical = Navigation(
          Navigation.Item('Chapter 1', 'Text 1', True),
          Navigation.Item('Chapter 2', 'Text 2'),
          Navigation.Item('Chapter 3', 'Text 3')
        ).as_pills().as_vertical()

        output = Panel(
          navigation_links,
          Separator(),
          navigation_links_vertical,
          Separator(),
          navigation_tabs,
          Separator(),
          navigation_pills,
          Separator(),
          navigation_pills_vertical
        )

  # --- Panel Tab --------------------------------------------------------------

  Panel:
    - title: Panel
      constructor: Panel(*components)
      arguments:
        - ['components', 'tuple', 'the panel components']
      description:
        - A <code>Panel</code> is a web-component for hosting other web-components and arranging them in different orders.
        - By default <code>Panel</code> has a flat layout, placing components one after another.
        - Use the <code>horizontal()</code> function to arrange components horizontally.
        - Use the <code>vertical()</code> function to arrange components vertically.
      code: |
        @right

        comp1 = Text('Component 1')
        comp2 = Text('Component 2')
        comp3 = Text('Component 3')

        Panel(comp1, comp2,  comp3)
        Panel(comp1, comp2,  comp3).horizontal()
        Panel(comp1, comp2,  comp3).vertical()
      evaluation: |
        from bootwrap import Text, Panel, Separator

        comp1 = Text('Component 1').add_classes('border')
        comp2 = Text('Component 2').add_classes('border')
        comp3 = Text('Component 3').add_classes('border')

        panel_flat = Panel(comp1, comp2,  comp3)
        panel_horizontal = Panel(comp1, comp2,  comp3).horizontal()
        panel_vertical = Panel(comp1, comp2,  comp3).vertical()

        output = Panel(
          panel_flat,
          Separator(),
          panel_horizontal,
          Separator(),
          panel_vertical
        )

  # --- Table Tab ---------------------------------------------------------------

  Table:
    - title: Table
      constructor: Table(head, body)
      arguments:
        - ['head', 'list', 'the table head (1D)']
        - ['body', 'list', 'the table head (2D)']
      description:
        -  A <code>Table</code> is a web-component for visualizing tabular information. Use <code>head</code> (1D array) to specify columns names and  <code>body</code> (2D array) for cells values. 
      code: |
        @right
          Table(
            ['Column 1', 'Column 2', 'Column 3'],
            [
              ['Value 11', 'Value 12', 'Value 13'],
              ['Value 21', 'Value 22', 'Value 23'],
              ['Value 31', 'Value 32', 'Value 33'],
            ]
          )
      evaluation: |
        from bootwrap import Table

        output = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['Value 21', 'Value 22', 'Value 23'],
            ['Value 31', 'Value 32', 'Value 33'],
          ]
        )

    - title: Striped Table
      description:
        - Use <code>as_striped()</code> method to add zebra-striping to any table row within the table body.
      code: |
        @left
          Table(...).as_striped()
      evaluation: |
        from bootwrap import Table

        output = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['Value 21', 'Value 22', 'Value 23'],
            ['Value 31', 'Value 32', 'Value 33'],
          ]
        ).as_striped()

    - title: Bordered Table
      description:
        - Use <code>as_bordered()</code> method to add borders on all sides of the table and cells.
      code: |
        @left
          Table(...).as_bordered()
      evaluation: |
        from bootwrap import Table

        output = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['Value 21', 'Value 22', 'Value 23'],
            ['Value 31', 'Value 32', 'Value 33'],
          ]
        ).as_bordered()

    - title: Small Table
      description:
        - Use <code>as_small()</code> method to make tables more compact by cutting cell padding in half.
      code: |
        @left
          Table(...).as_small()
      evaluation: |
        from bootwrap import Table

        output = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['Value 21', 'Value 22', 'Value 23'],
            ['Value 31', 'Value 32', 'Value 33'],
          ]
        ).as_small()

    - title: Dark Table
      description:
        - Use <code>as_dark()</code> method to invert the colors—with light text on dark backgrounds.
      code: |
        @left
          Table(...).as_dark()
      evaluation: |
        from bootwrap import Table

        output = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['Value 21', 'Value 22', 'Value 23'],
            ['Value 31', 'Value 32', 'Value 33'],
          ]
        ).as_dark()

    - title: Responsive Table
      description:
        - Use <code>as_responsive(breakpoint=Breakpoint.SM)</code> method to create responsive table, with able to adjust columns width for different resolution.  The responsive function gets the breakpoint as a parameter. The default breakpoint is <code>Breakpoint.SM</code>
      code: |
        @right
          Table(...).as_responsive(Breakpoint.SM)


    - title: Light/Dark Table Header
      description:
        - Use the table property <code>head</code> to access to the table header.
        - Use <code>as_light()</code> method to show dark header text on light backgrounds. Use <code>as_dark()</code> method to show light header text on dark backgrounds.
      code: |
        @left
        table_light_head = Table(...)
        table.head.as_light()

        table_dark_head = Table(...)
        table.head.as_dark()
      evaluation: |
        from bootwrap import Table, Panel

        table_light_head = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['...', '...', '...']
          ]
        )
        table_light_head.head.as_light()

        table_dark_head = Table(
          ['Column 1', 'Column 2', 'Column 3'],
          [
            ['Value 11', 'Value 12', 'Value 13'],
            ['...', '...', '...']
          ]
        )
        table_dark_head.head.as_dark()

        output = Panel(table_light_head, table_dark_head)


  # --- Text Tab ---------------------------------------------------------------

  Text:
    - title: Text
      constructor: Text(content)
      arguments:
        - ['content', 'str | list | dict', 'the content to display as text']
      description:
        -  A <code>Text</code> is a web-component for visualizing different form of textual content such as heder, paragraph, code, etc .
      code: |
        @right

        Text('Hello world!')
      evaluation: |
        from bootwrap import Text, Panel

        text_plain  = Text('Hello world!')

        output = Panel(
          text_plain
        )